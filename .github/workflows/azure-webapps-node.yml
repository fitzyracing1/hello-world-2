# This workflow will build and push a node.js application to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-nodejs?tabs=linux&pivots=development-environment-cli
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the AZURE_WEBAPP_PACKAGE_PATH and NODE_VERSION environment variables below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: your-app-name    # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root
  NODE_VERSION: '20.x'                # set this to the node version to use

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: npm install, build, and test
      run: |
        npm install
        npm run build --if-present
        npm run test --if-present

    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v3
      with:
        name: node-app
        path: .

  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Development'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v3
      with:
        name: node-app

    - name: 'Deploy to Azure WebApp'
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
      
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

        import time
import threading
from collections import deque

class Process:
    def __init__(self, name, burst_time, io_time=None):
        self.name = name
        self.burst_time = burst_time  # CPU time needed
        self.io_time = io_time if io_time is not None else 0  # I/O time if any
        self.remaining_time = burst_time
        self.state = "New"

    def run(self, time_slice):
        if self.remaining_time > 0:
            self.state = "Running"
            actual_time = min(time_slice, self.remaining_time)
            time.sleep(actual_time)  # Simulate CPU time
            self.remaining_time -= actual_time
            if self.remaining_time == 0:
                self.state = "Terminated"
                print(f"{self.name} finished execution.")
            elif self.io_time > 0:
                self.state = "Waiting"
                print(f"{self.name} is waiting for I/O.")
                time.sleep(self.io_time)  # Simulate I/O time
                self.io_time = 0
                self.state = "Ready"
            else:
                self.state = "Ready"

class Scheduler:
    def __init__(self, time_slice=1):
        self.ready_queue = deque()
        self.time_slice = time_slice  # Quantum for Round Robin

    def add_process(self, process):
        process.state = "Ready"
        self.ready_queue.append(process)
        print(f"{process.name} added to ready queue.")

    def schedule(self):
        while self.ready_queue:
            process = self.ready_queue.popleft()
            if process.state != "Terminated":
                process.run(self.time_slice)
                if process.state == "Ready":
                    self.ready_queue.append(process)

# Example usage
if __name__ == "__main__":
    scheduler = Scheduler(time_slice=2)

    # Creating sample processes
    processes = [
        Process("P1", 5, io_time=2),  # Process with I/O
        Process("P2", 3),
        Process("P3", 4, io_time=1)
    ]

    # Add processes to scheduler
    for process in processes:
        scheduler.add_process(process)

    # Start scheduling
    scheduler_thread = threading.Thread(target=scheduler.schedule)
    scheduler_thread.start()

    # Wait for scheduling to complete
    scheduler_thread.join()
    print("All processes have completed.")
    
